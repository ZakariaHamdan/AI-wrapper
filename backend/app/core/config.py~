"""
Configuration management for the Gemini AI service.
UPDATED: Added database switching support
"""
import os
from pydantic import BaseSettings
from typing import Optional
import re

class Settings(BaseSettings):
    """Application settings"""

    # API settings
    API_HOST: str = "0.0.0.0"
    API_PORT: int = 8000
    BASE_URL: str = "http://localhost:8000"

    # Gemini API settings
    GEMINI_API_KEY: str
    GEMINI_MODEL: str = "gemini-2.5-pro-experimental"

    # Database settings
    DB_CONNECTION_STRING: str

    # File settings
    CONTEXT_FOLDER: str = "context"
    UPLOAD_FOLDER: str = "uploads"

    # Logging settings
    LOG_LEVEL: str = "INFO"

    class Config:
        env_file = ".env"
        case_sensitive = True

    def get_connection_template(self) -> str:
        """
        Extract connection string template from DB_CONNECTION_STRING
        Returns template with {DATABASE_NAME} placeholder
        """
        connection_string = self.DB_CONNECTION_STRING

        # Extract database name from connection string
        pattern = r'Database=([^;]+)'
        match = re.search(pattern, connection_string, re.IGNORECASE)

        if match:
            # Replace the database name with placeholder
            template = re.sub(pattern, 'Database={DATABASE_NAME}', connection_string, flags=re.IGNORECASE)
            return template
        else:
            raise ValueError("Could not extract database name from connection string")

    def get_default_database(self) -> str:
        """
        Extract default database name from DB_CONNECTION_STRING
        """
        connection_string = self.DB_CONNECTION_STRING

        # Extract database name from connection string
        pattern = r'Database=([^;]+)'
        match = re.search(pattern, connection_string, re.IGNORECASE)

        if match:
            return match.group(1).lower()
        else:
            raise ValueError("Could not extract database name from connection string")

    def build_connection_string(self, database_name: str) -> str:
        """Build connection string for specific database"""
        template = self.get_connection_template()
        if not template:
            return None
        return template.replace('{database_name}', database_name)

# Global settings instance
_settings = None

def get_settings() -> Settings:
    """Get application settings (singleton)"""
    global _settings
    if _settings is None:
        _settings = Settings()
    return _settings